{"version":3,"sources":["components/Card.js","components/Bikes.js","App.js","serviceWorker.js","index.js"],"names":["Cards","showModal","setState","show","handleClose","onFormSubmit","event","preventDefault","alert","state","Card","style","width","Img","variant","src","this","props","image","Body","Title","name","Text","price","product_type","Button","onClick","Modal","onHide","Header","closeButton","onSubmit","type","class","required","Footer","Component","Bikes","console","log","data","products","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","map","object","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yqCAwEeA,E,YAnEb,aAAc,IAAD,8BACX,+CAMFC,UAAY,WACV,EAAKC,SAAS,CAACC,MAAM,KARV,EAWbC,YAAc,WACZ,EAAKF,SAAS,CAACC,MAAM,KAZV,EAebE,aAAe,SAACC,GACdA,EAAMC,iBACNC,MAAM,0CACN,EAAKN,SAAS,CAACC,MAAM,KAhBrB,EAAKM,MAAQ,CACXN,MAAM,GAHG,E,sEAsBX,OACE,6BACE,6BACE,kBAACO,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACpB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKC,KAAKC,MAAMC,QACxC,kBAACR,EAAA,EAAKS,KAAN,KACE,kBAACT,EAAA,EAAKU,MAAN,KAAaJ,KAAKC,MAAMI,MACxB,kBAACX,EAAA,EAAKY,KAAN,gBACWN,KAAKC,MAAMM,OAEtB,kBAACb,EAAA,EAAKY,KAAN,sBACiBN,KAAKC,MAAMO,cAE5B,kBAACC,EAAA,EAAD,CAAQX,QAAQ,UAAUY,QAASV,KAAKf,WAAxC,WAIN,6BACA,kBAAC0B,EAAA,EAAD,CAAOxB,KAAMa,KAAKP,MAAMN,KAAMyB,OAAQZ,KAAKZ,aACzC,kBAACuB,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvB,kBAACH,EAAA,EAAMP,MAAP,KAAcJ,KAAKC,MAAMI,OAE3B,kBAACM,EAAA,EAAMR,KAAP,KACE,0BAAMY,SAAUf,KAAKX,cACnB,uCACA,2BAAO2B,KAAK,OAAOC,MAAM,eAAeC,UAAQ,IAChD,wCACA,2BAAOF,KAAK,QAAQC,MAAM,eAAeC,UAAQ,IACjD,+CACA,2BAAOF,KAAK,SAASC,MAAM,eAAeC,UAAQ,IAAE,6BACpD,4BAAQD,MAAM,kBAAkBD,KAAK,UAArC,kBAGJ,kBAACL,EAAA,EAAMQ,OAAP,KACE,kBAACV,EAAA,EAAD,CAAQX,QAAQ,YAAYY,QAASV,KAAKZ,aAA1C,iB,GA1DQgC,a,wBC+CLC,E,4LA1CXC,QAAQC,IAAIC,EAAKC,Y,+BAIjB,OACE,6BACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,OAAO,KAAK9B,QAAQ,QACpC,kBAAC4B,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,eACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,YAKR,yBAAKM,UAAU,aACb,4CAEF,yBAAKA,UAAU,8EAEXZ,EAAKC,SAASa,KAAI,SAACC,EAAQC,GACzB,OACE,yBAAKC,IAAKF,EAAOL,IACf,kBAAC,EAAD,CACEhC,MAAOqC,EAAOrC,MACdG,KAAMkC,EAAOlC,KACbE,MAAOgC,EAAOhC,MACdC,aAAc+B,EAAO/B,eAErB,uC,GAlCAY,aCMLsB,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCMcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.69fce781.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Button, Modal } from 'react-bootstrap';\n\nclass Cards extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      show: false\n    }\n  }\n\n  showModal = () => {\n    this.setState({show: true});\n  }\n\n  handleClose = () => {\n    this.setState({show: false})\n  }\n\n  onFormSubmit = (event) => {\n    event.preventDefault();\n    alert('Woohooo, your bike has been booked..!!')\n    this.setState({show: false});\n  }\n\n  render(){\n    return(\n      <div>\n        <div>\n          <Card style={{ width: '18rem' }}>\n            <Card.Img variant=\"top\" src={this.props.image} />\n            <Card.Body>\n              <Card.Title>{this.props.name}</Card.Title>\n              <Card.Text>\n                Price : {this.props.price}\n              </Card.Text>\n              <Card.Text>\n                Product Type: {this.props.product_type}\n              </Card.Text>\n              <Button variant=\"primary\" onClick={this.showModal}>Book</Button>\n            </Card.Body>\n          </Card>\n        </div>\n        <div>\n        <Modal show={this.state.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>{this.props.name}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <form onSubmit={this.onFormSubmit}>\n              <label>Name</label>\n              <input type=\"text\" class=\"form-control\" required/>\n              <label>Email</label>\n              <input type=\"email\" class=\"form-control\" required/>\n              <label>Phone Number</label>\n              <input type=\"number\" class=\"form-control\" required/><br/>\n              <button class=\"btn btn-primary\" type=\"submit\">Save Changes</button>\n            </form>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Cards;\n","import React, { Component } from 'react';\nimport Card from './Card';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport data from './data/bikerentals.json';\n\nclass Bikes extends Component {\n\n  componentDidMount(){\n    console.log(data.products);\n  }\n\n  render(){\n    return(\n      <div>\n        <div>\n          <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">Bike Rental</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <Nav.Link href=\"#home\">Home</Nav.Link>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n        </div>\n        <div className=\"jumbotron\">\n          <h2>Bike Rental</h2>\n        </div>\n        <div className=\"d-flex justify-content-between flex-row flex-wrap align-content-around p-5\">\n          {\n            data.products.map((object, i) => {\n              return(\n                <div key={object.id}>\n                  <Card\n                    image={object.image}\n                    name={object.name}\n                    price={object.price}\n                    product_type={object.product_type}\n                    />\n                    <br/>\n                </div>\n              );\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Bikes;\n","import React from 'react';\nimport Bikes from './components/Bikes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Bikes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}